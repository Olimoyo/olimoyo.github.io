{"version":3,"file":"component---src-pages-index-tsx-0b4f15788c72b3c93972.js","mappings":"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","sources":["webpack://oliver/./src/components/layout.module.css","webpack://oliver/./src/components/layout.tsx","webpack://oliver/./src/pages/index.tsx","webpack://oliver/./src/pages/index.module.css","webpack://oliver/./src/pages/projects.tsx","webpack://oliver/./src/pages/projects.module.css","webpack://oliver/./src/pages/research.tsx","webpack://oliver/./src/pages/research.module.css","webpack://oliver/./src/pages/work.tsx","webpack://oliver/./src/pages/work.module.css"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--78b04\";\nexport var navLinkItem = \"layout-module--nav-link-item--a5f0a\";\nexport var navLinks = \"layout-module--nav-links--1113b\";","import * as React from 'react'\nimport { Link } from 'gatsby'\nimport {\n  container,\n  navLinks,\n  navLinkItem,\n  navLinkText,\n  heading,\n} from './layout.module.css'\n\ninterface Props {\n  pageTitle?: string,\n  children: React.ReactNode,\n}\nconst Layout = ({ pageTitle, children }: Props): React.JSX.Element => {\n  return (\n    <div className={container}>\n      <nav>\n        <ul className={navLinks}>\n          <li className={navLinkItem}><Link to=\"/\" className={navLinkText}>Home</Link></li>\n          <li className={navLinkItem}><Link to=\"#research\" className={navLinkText}>Research</Link></li>\n          <li className={navLinkItem}><Link to=\"#work\" className={navLinkText}>Work</Link></li>\n          <li className={navLinkItem}><Link to=\"#projects\" className={navLinkText}>Projects</Link></li>\n        </ul>\n      </nav>\n      <main>\n        { heading && <h1 className={heading}>{pageTitle}</h1> }\n        {children}\n      </main>\n    </div>\n  )\n}\n\nexport default Layout\n","import * as React from \"react\"\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Research from \"./research\"\nimport Work from \"./work\"\nimport Projects from \"./projects\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport { bio, image, text } from './index.module.css'\n\nconst IndexPage: React.FC<PageProps> = () => {\n  return (\n    <Layout>\n      <div className={bio}>\n        <div className={image}>\n          <StaticImage src=\"../images/oliver.jpeg\" alt=\"Profile picture\" />\n        </div>\n      <div className={text}>\n          <h1>Oliver Limoyo</h1>\n          <p>I'm a Ph.D. student at the STARS Lab, University of Toronto. My research focuses on the application of reinforcement learning for autonomous robots. I'm supervised by Proj. Johnathan Kelly.</p>\n        </div>\n      </div>\n      <Research />\n      <Work />\n      <Projects />\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const Head: HeadFC = () => <title>Home Page</title>\n","// extracted by mini-css-extract-plugin\nexport var bio = \"index-module--bio--18948\";\nexport var image = \"index-module--image--0fe32\";\nexport var text = \"index-module--text--96015\";","import * as React from \"react\"\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport {\n  container,\n  image,\n  content,\n} from './projects.module.css'\nconst ProjectsPage = () => {\n\n  const sourceData = useStaticQuery(dataQuery)\n  const data = sourceData.allProjectsJson.edges\n  return (\n    <div>\n      <h2 id=\"projects\">Projects</h2>\n      {\n        data.map((project) => (\n          <div className={container}>\n            <div className={image}>\n              { project.node.image && <GatsbyImage image={getImage(project.node.image)} alt=\"\" /> }\n            </div>\n            <div className={content}>\n              <h3>{project.node.title}</h3>\n              <p>{project.node.description}</p>\n              <p>\n                {project.node.links && project.node.links.map((link) => <span><a href={link.url} target=\"_blank\">{link.name}</a></span>)}\n              </p>\n            </div>\n          </div>\n        ))\n      }\n    </div>\n  )\n}\nconst dataQuery = graphql`\n  query getProjects {\n    allProjectsJson {\n      edges {\n        node {\n          title\n          description\n          links {\n            name\n            url\n          }\n          image {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, formats: AUTO)\n            }\n          }\n        }\n      }\n    }\n  }\n`\nexport const Head = () => <title>Oliver Limoyo: Projects</title>\nexport default ProjectsPage","// extracted by mini-css-extract-plugin\nexport var container = \"projects-module--container--2b69d\";\nexport var content = \"projects-module--content--688b0\";\nexport var image = \"projects-module--image--76194\";","import * as React from \"react\"\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport {\n  container,\n  image,\n  content,\n  authors,\n  journal,\n  links,\n} from './research.module.css'\nconst ResearchPage = () => {\n\n  const sourceData = useStaticQuery(dataQuery)\n  const data = sourceData.allResearchJson.edges\n  return (\n    <div>\n      <h2 id=\"research\">Research</h2>\n      {\n        data.map((research) => (\n          <div className={container}>\n            <div className={image}>\n              { research.node.image && <GatsbyImage image={getImage(research.node.image)} alt=\"\" /> }\n            </div>\n            <div className={content}>\n            <h3>{research.node.title}</h3>\n            <p className={authors}>{research.node.authors}</p>\n            <p className={journal}>{research.node.journal}, {research.node.date}</p>\n              {research.node.links && \n                (<p className={links}> \n                  { research.node.links.map((link) => <span><a href={link.url} target=\"_blank\">{link.name}</a></span>)}\n                </p>\n                )}\n            {research.node.description && <p>{research.node.description}</p>}\n            </div>\n          </div>\n        ))\n      }\n    </div>\n  )\n}\nconst dataQuery = graphql`\n  query getResearch {\n    allResearchJson {\n      edges {\n        node {\n          title\n          authors\n          journal\n          date\n          description\n          links {\n            name\n            url\n          }\n          image {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, formats: AUTO)\n            }\n          }\n        }\n      }\n    }\n  }\n`\nexport const Head = () => <title>Oliver Limoyo: Research</title>\nexport default ResearchPage","// extracted by mini-css-extract-plugin\nexport var authors = \"research-module--authors--cf877\";\nexport var container = \"research-module--container--d7ab8\";\nexport var content = \"research-module--content--a5861\";\nexport var image = \"research-module--image--1b383\";\nexport var journal = \"research-module--journal--3f085\";\nexport var links = \"research-module--links--dd9c4\";","import * as React from \"react\"\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport {\n  container,\n  image,\n  content,\n} from './work.module.css'\nconst WorkPage = () => {\n\n  const sourceData = useStaticQuery(dataQuery)\n  const data = sourceData.allWorkJson.edges\n  return (\n    <div>\n      <h2 id=\"work\">Work</h2>\n      {\n        data.map((work) => (\n          <div className={container}>\n            <div className={image}>\n              { work.node.image && <GatsbyImage image={getImage(work.node.image)} alt=\"\" /> }\n            </div>\n            <div className={content}>\n              <h3>{work.node.title}</h3>\n              <h4>{work.node.company}, {work.node.date}</h4>\n              <p>{work.node.description}</p>\n            </div>\n          </div>\n        ))\n      }\n    </div>\n  )\n}\nconst dataQuery = graphql`\n  query getWork {\n    allWorkJson {\n      edges {\n        node {\n          title\n          company\n          date\n          description\n          image {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, formats: AUTO)\n            }\n          }\n        }\n      }\n    }\n  }\n`\nexport const Head = () => <title>Oliver Limoyo: Work</title>\nexport default WorkPage","// extracted by mini-css-extract-plugin\nexport var container = \"work-module--container--074ac\";\nexport var content = \"work-module--content--e4067\";\nexport var image = \"work-module--image--cc6f7\";"],"names":["container","navLinkItem","navLinks","_ref","pageTitle","children","React","className","Link","to","navLinkText","heading","Layout","StaticImage","src","alt","__imageData","Research","Work","Projects","Head","dataQuery","data","useStaticQuery","allProjectsJson","edges","id","map","project","node","image","GatsbyImage","getImage","title","description","links","link","href","url","target","name","allResearchJson","research","authors","journal","date","allWorkJson","work","company"],"sourceRoot":""}